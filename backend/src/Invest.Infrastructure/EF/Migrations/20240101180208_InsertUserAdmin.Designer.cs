// <auto-generated />
using System;
using Invest.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Invest.Infrastructure.EF.Migrations
{
    [DbContext(typeof(InvestmentDbContext))]
    [Migration("20240101180208_InsertUserAdmin")]
    partial class InsertUserAdmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Invest.Domain.Portfolio.Models.Portfolio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserUUID")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserUUID");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("Invest.Domain.Share.ValueObjects.Currency", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Invest.Domain.Stock.Models.Stock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long>("PortfolioId")
                        .HasColumnType("bigint");

                    b.Property<string>("Price")
                        .HasColumnType("longtext");

                    b.Property<string>("Quantity")
                        .HasColumnType("longtext");

                    b.Property<int>("StockTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("StockTypeId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Invest.Domain.Stock.ValueObjects.StockType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("StockType");
                });

            modelBuilder.Entity("Invest.Domain.User.Models.User", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.HasKey("UUID")
                        .HasName("pk_user_uuid");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Invest.Domain.Portfolio.Models.Portfolio", b =>
                {
                    b.HasOne("Invest.Domain.User.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUUID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Invest.Domain.Stock.Models.Stock", b =>
                {
                    b.HasOne("Invest.Domain.Share.ValueObjects.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invest.Domain.Portfolio.Models.Portfolio", "Portfolio")
                        .WithMany("Stocks")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invest.Domain.Stock.ValueObjects.StockType", "StockType")
                        .WithMany()
                        .HasForeignKey("StockTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Portfolio");

                    b.Navigation("StockType");
                });

            modelBuilder.Entity("Invest.Domain.Portfolio.Models.Portfolio", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
